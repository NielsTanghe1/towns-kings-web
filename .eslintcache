[{"/mnt/d/Projects/towns-kings-backend/assets/src/index.js":"1","/mnt/d/Projects/towns-kings-backend/assets/src/reportWebVitals.js":"2","/mnt/d/Projects/towns-kings-backend/assets/src/App.js":"3","/mnt/d/Projects/towns-kings-backend/assets/src/components/Navbar.js":"4","/mnt/d/Projects/towns-kings-backend/assets/src/pages/ServerList.js":"5","/mnt/d/Projects/towns-kings-backend/assets/src/pages/Nodes.js":"6","/mnt/d/Projects/towns-kings-backend/assets/src/components/WorldDialog.js":"7","/mnt/d/Projects/towns-kings-backend/assets/src/enviroment.js":"8","/mnt/d/Projects/towns-kings-backend/assets/src/NodeConfig.js":"9","/mnt/d/Projects/towns-kings-backend/assets/src/pages/__generated__/ServerListQuery.graphql.js":"10","/mnt/d/Projects/towns-kings-backend/assets/src/components/__generated__/WorldDialog_worldList.graphql.js":"11","/mnt/d/Projects/towns-kings-backend/assets/src/components/__generated__/NavbarQuery.graphql.js":"12"},{"size":500,"mtime":1614189504027,"results":"13","hashOfConfig":"14"},{"size":362,"mtime":1614189504107,"results":"15","hashOfConfig":"14"},{"size":1177,"mtime":1614761684712,"results":"16","hashOfConfig":"14"},{"size":7156,"mtime":1614761801560,"results":"17","hashOfConfig":"14"},{"size":2346,"mtime":1614762080516,"results":"18","hashOfConfig":"14"},{"size":2114,"mtime":1614189504058,"results":"19","hashOfConfig":"14"},{"size":1557,"mtime":1614759952166,"results":"20","hashOfConfig":"14"},{"size":744,"mtime":1614189504001,"results":"21","hashOfConfig":"14"},{"size":629,"mtime":1614189503934,"results":"22","hashOfConfig":"14"},{"size":2311,"mtime":1614189504092,"results":"23","hashOfConfig":"14"},{"size":1530,"mtime":1614616493759,"results":"24","hashOfConfig":"14"},{"size":2008,"mtime":1614616493752,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"18yi81p",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"/mnt/d/Projects/towns-kings-backend/assets/src/index.js",[],["55","56"],"/mnt/d/Projects/towns-kings-backend/assets/src/reportWebVitals.js",[],"/mnt/d/Projects/towns-kings-backend/assets/src/App.js",["57","58","59"],"import React from \"react\";\nimport logo from './logo.svg';\nimport './App.css';\nimport Navbar from \"./components/Navbar\";\nimport ServerList from \"./pages/ServerList\";\n\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\nimport {CircularProgress, Grid, IconButton, Toolbar} from \"@material-ui/core\";\nimport NodePage from \"./pages/Nodes\";\n\nfunction App() {\n\n    const [world, setWorld] = React.useState(null);\n\n\n    return (\n    <div className=\"App\">\n        <Router>\n            <Grid container direction=\"column\" style={{height: \"100vh\"}}>\n                <Navbar onWorldSelect={(v) => setWorld(v)}/>\n\n                {world == null ? <CircularProgress style={{marginTop: \"10%\", marginLeft: \"auto\", marginRight: \"auto\"}} color=\"secondary\"/> :\n                    <Switch>\n                        <Route path=\"/dashboard\">\n                            <ServerList world={world}/>\n                        </Route>\n\n                        <Route path=\"/nodes\">\n                            <NodePage/>\n                        </Route>\n                    </Switch>\n                }\n            </Grid>\n\n\n        </Router>\n    </div>\n  );\n}\n\nexport default App;\n","/mnt/d/Projects/towns-kings-backend/assets/src/components/Navbar.js",["60","61","62","63"],"import React from 'react';\nimport {\n    AppBar,\n    Button, CircularProgress, CssBaseline, Divider,\n    Drawer, Grid,\n    IconButton,\n    List, ListItem, ListItemIcon, ListItemText,\n    makeStyles,\n    Menu,\n    MenuItem,\n    Toolbar,\n    Typography, useTheme\n} from \"@material-ui/core\";\nimport MenuIcon from '@material-ui/icons/Menu';\nimport clsx from \"clsx\";\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport {Link} from 'react-router-dom';\nimport WorldIcon from '@material-ui/icons/Public';\nimport WorldDialog from \"./WorldDialog\";\n\nimport {graphql, QueryRenderer} from \"react-relay\";\nimport environment from \"../enviroment\";\n\nconst drawerWidth = 240\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: 'flex',\n        overflow: \"hidden\",\n    },\n    appBar: {\n        transition: theme.transitions.create(['margin', 'width'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n        zIndex: theme.zIndex.drawer + 1,\n    },\n    appBarShift: {\n        width: `calc(100% - ${drawerWidth}px)`,\n        marginLeft: drawerWidth,\n        transition: theme.transitions.create(['margin', 'width'], {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n    hide: {\n        display: 'none',\n    },\n    drawer: {\n        width: drawerWidth,\n        flexShrink: 0,\n    },\n    drawerPaper: {\n        width: drawerWidth,\n    },\n    drawerHeader: {\n        display: 'flex',\n        alignItems: 'center',\n        padding: theme.spacing(0, 1),\n        // necessary for content to be below app bar\n        ...theme.mixins.toolbar,\n        color: theme.palette.primary,\n    },\n    content: {\n        flexGrow: 1,\n        padding: theme.spacing(3),\n        transition: theme.transitions.create('margin', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n        marginLeft: -drawerWidth,\n    },\n    contentShift: {\n        transition: theme.transitions.create('margin', {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n        marginLeft: 0,\n    },\n}));\n\nfunction Navbar(props) {\n\n    const { onWorldSelect } = props;\n\n    const classes = useStyles();\n    const theme = useTheme();\n    const [openDrawer, setOpenDrawer] = React.useState(false);\n    const [openWorld, setOpenWorld] = React.useState(false);\n\n    const worldClick = () => setOpenWorld(true);\n\n    const worldClose = () => setOpenWorld(false);\n\n    const handleDrawerOpen = () => setOpenDrawer(true);\n\n    const handleDrawerClose = () => setOpenDrawer(false);\n\n    return (\n        <Grid item className={classes.root}>\n            <CssBaseline/>\n            <AppBar\n                position=\"static\"\n                className={clsx(classes.appBar, {\n                    [classes.appBarShift]: openDrawer,\n                })}\n            >\n                <Toolbar style={{height: \"auto\"}}>\n                    <IconButton\n                        color=\"inherit\"\n                        aria-label=\"open drawer\"\n                        onClick={handleDrawerOpen}\n                        edge=\"start\"\n                        className={clsx(classes.menuButton, openDrawer && classes.hide)}\n                    >\n                        <MenuIcon/>\n                    </IconButton>\n                    <Typography variant=\"h6\" noWrap>\n                        Towns and Kings\n                    </Typography>\n\n                    <div\n                        style={{flexGrow: 1}}\n                    />\n\n                    <QueryRenderer\n                        environment={environment}\n                        query={graphql`\n                            query NavbarQuery {\n                                ...WorldDialog_worldList\n                            }\n                        `}\n                        variables={{}}\n                        render={({error, props}) => {\n                            if (error) {\n                                console.error(error);\n                                return <div>Error!</div>;\n                            }\n                            if (!props) {\n                                return <CircularProgress className={classes.menuButton} color=\"secondary\"/>;\n                            }\n\n                            return [\n                                <WorldDialog key=\"dialog\" open={openWorld} worldList={props} onClose={worldClose} onSelect={(v) => {\n                                    worldClose();\n                                    onWorldSelect(v);\n                                }} />,\n                                <IconButton\n                                    color=\"inherit\"\n                                    key=\"worldbutton\"\n                                    aria-haspopup=\"true\"\n                                    onClick={worldClick}\n                                    edge=\"start\"\n                                    className={classes.menuButton}\n                                >\n                                    <WorldIcon/>\n                                </IconButton>\n                            ];\n                        }}\n                    />\n\n\n                </Toolbar>\n            </AppBar>\n            <Drawer\n                className={classes.drawer}\n                variant=\"persistent\"\n                anchor=\"left\"\n                open={openDrawer}\n                classes={{\n                    paper: classes.drawerPaper,\n                }}\n            >\n                <div className={classes.drawerHeader}>\n                    <Typography variant=\"h5\" style={{flexGrow: 1, textAlign: \"left\", padding: theme.spacing(0, 1)}}> My City </Typography>\n                    <IconButton onClick={handleDrawerClose}>\n                        {theme.direction === 'ltr' ? <ChevronLeftIcon/> : <ChevronRightIcon/>}\n                    </IconButton>\n                </div>\n                <Divider/>\n                <List>\n                    {\n                        [\n                            {text: 'Overview', url: '/dashboard'},\n                            {text: 'Nodes', url: '/nodes'},\n                            {text: 'Economics', url: '/economics'},\n                            {text: 'Laws', url: '/laws'},\n\n                        ].map((item, index) => (\n                            <ListItem button key={item.text} component={Link} to={item.url}>\n                                <ListItemText primary={item.text}/>\n                            </ListItem>\n                        ))}\n                </List>\n                <Divider/>\n            </Drawer>\n            <main\n                className={clsx(classes.content, {\n                    [classes.contentShift]: openDrawer,\n                })}\n            >\n            </main>\n        </Grid>\n    );\n}\n\nexport default Navbar;\n","/mnt/d/Projects/towns-kings-backend/assets/src/pages/ServerList.js",[],"/mnt/d/Projects/towns-kings-backend/assets/src/pages/Nodes.js",["64","65","66"],"import React from 'react'\nimport { NodeEditor } from \"flume\";\nimport config from \"../NodeConfig\";\nimport {\n    Container,\n    Divider,\n    Drawer,\n    Grid,\n    ListItem,\n    ListItemIcon,\n    ListItemText,\n    makeStyles,\n    Toolbar\n} from \"@material-ui/core\";\nimport List from \"@material-ui/core/List\";\nimport {classes} from \"istanbul-lib-coverage\";\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: 'flex',\n    },\n    drawer: {\n        width: drawerWidth,\n        flexShrink: 0,\n    },\n    drawerPaper: {\n        width: drawerWidth,\n    },\n    drawerContainer: {\n        overflow: 'auto',\n    },\n    content: {\n        flexGrow: 1,\n        padding: theme.spacing(3),\n    },\n}));\n\nfunction NodePage()\n{\n\n    const classes = useStyles();\n\n    return (\n        <Grid item className={classes.root} style={{flexGrow: 1}}>\n            <NodeEditor\n                portTypes={config.portTypes}\n                nodeTypes={config.nodeTypes}\n            />\n\n            <Drawer\n                className={classes.drawer}\n                variant=\"permanent\"\n                classes={{\n                    paper: classes.drawerPaper,\n                }}\n                anchor=\"right\"\n            >\n\n                <Toolbar />\n                <div className={classes.drawerContainer}>\n                    <List>\n                        {['Inbox', 'Starred', 'Send email', 'Drafts'].map((text, index) => (\n                            <ListItem button key={text}>\n\n                                <ListItemText primary={text} />\n                            </ListItem>\n                        ))}\n                    </List>\n                    <Divider />\n                    <List>\n                        {['All mail', 'Trash', 'Spam'].map((text, index) => (\n                            <ListItem button key={text}>\n\n                                <ListItemText primary={text} />\n                            </ListItem>\n                        ))}\n                    </List>\n                </div>\n            </Drawer>\n\n        </Grid>\n\n    )\n}\n\nexport default NodePage;","/mnt/d/Projects/towns-kings-backend/assets/src/components/WorldDialog.js",[],"/mnt/d/Projects/towns-kings-backend/assets/src/enviroment.js",[],"/mnt/d/Projects/towns-kings-backend/assets/src/NodeConfig.js",[],"/mnt/d/Projects/towns-kings-backend/assets/src/pages/__generated__/ServerListQuery.graphql.js",[],"/mnt/d/Projects/towns-kings-backend/assets/src/components/__generated__/WorldDialog_worldList.graphql.js",[],["67","68"],"/mnt/d/Projects/towns-kings-backend/assets/src/components/__generated__/NavbarQuery.graphql.js",[],{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":2,"column":8,"nodeType":"75","messageId":"76","endLine":2,"endColumn":12},{"ruleId":"73","severity":1,"message":"77","line":8,"column":33,"nodeType":"75","messageId":"76","endLine":8,"endColumn":43},{"ruleId":"73","severity":1,"message":"78","line":8,"column":45,"nodeType":"75","messageId":"76","endLine":8,"endColumn":52},{"ruleId":"73","severity":1,"message":"79","line":4,"column":5,"nodeType":"75","messageId":"76","endLine":4,"endColumn":11},{"ruleId":"73","severity":1,"message":"80","line":7,"column":21,"nodeType":"75","messageId":"76","endLine":7,"endColumn":33},{"ruleId":"73","severity":1,"message":"81","line":9,"column":5,"nodeType":"75","messageId":"76","endLine":9,"endColumn":9},{"ruleId":"73","severity":1,"message":"82","line":10,"column":5,"nodeType":"75","messageId":"76","endLine":10,"endColumn":13},{"ruleId":"73","severity":1,"message":"83","line":5,"column":5,"nodeType":"75","messageId":"76","endLine":5,"endColumn":14},{"ruleId":"73","severity":1,"message":"80","line":10,"column":5,"nodeType":"75","messageId":"76","endLine":10,"endColumn":17},{"ruleId":"73","severity":1,"message":"84","line":16,"column":9,"nodeType":"75","messageId":"76","endLine":16,"endColumn":16},{"ruleId":"69","replacedBy":"85"},{"ruleId":"71","replacedBy":"86"},"no-native-reassign",["87"],"no-negated-in-lhs",["88"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'IconButton' is defined but never used.","'Toolbar' is defined but never used.","'Button' is defined but never used.","'ListItemIcon' is defined but never used.","'Menu' is defined but never used.","'MenuItem' is defined but never used.","'Container' is defined but never used.","'classes' is defined but never used.",["87"],["88"],"no-global-assign","no-unsafe-negation"]